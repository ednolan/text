[/ Copyright (C) 2020 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]
[section An Overview of Boost.Text]

_Text_ is composed of two main layers:

* The Unicode layer
* The _t_ layer

There are a couple of assorted bits that were necessary or useful to have
around when implementing various parts of _Text_: _segv_, _ur_, _urv_, and
_trie_\/_trie_m_\/_trie_s_.


[heading The Unicode Layer]

The Unicode layer provides a few Unicode-related utility types, but is
primarily comprised of the Unicode algorithms.  These algorithms are done in
the style of the standard algorithms, with range-friendly interfaces.  For
each of the unicode algorithms there is a corresponding view.  There are
algorithms for these Unicode operations:

* Transcoding among UTF-8, UTF-16, and UTF-32
* Normalization, including the four Unicode normalization forms, plus the FCC form from _tn5_
* Text segmentation (line breaks, word breaks, etc.)
* Case mapping (`to_upper()`, `is_lower()`, etc.)
* Collation, including tailoring using the _ldml_coll_tail_ and serialization of collation tables
* Collation-aware searching, including caseless searching
* The Unicode Bidirectional Algorithm, for laying out text that includes both left-to-right and right-to-left text

These algorithms are independent of the _t_ layer; it is possible to use
_Text_ as a Unicode library without using the _t_ layer at all.


[heading The _t_ Layer]

The _t_ layer is built on top of the Unicode layer.  Its types encode text as
UTF-8, and maintain normalization.  Much of their implementation is done in
terms of the algorithms from the Unicode layer.  The types in this layer are:
_t_, _tv_, _r_, and _rv_.  It contains templates that can be instantiated with
different UTF formats, normalization forms, and/or underlying storage.


[heading The Assorted Bits]

Finally, there are some items that I wrote in the process of implementing
everything else, that rise to the level of general utility.

First is _segv_.  This is a discontiguous sequence of `T`, for which
insertions anywhere in the sequence are cheap, with very cheap copies provided
via a copy-on-write mechanism.  It is a generalization of _ur_ for arbitrary
`T`.

The remaining assorted types are _trie_, _trie_m_, and _trie_s_.  The first of
these is a trie that is not a valid C++ container.  The latter two are
analogous to `std::map` and `std::set`, respectively, just built on a trie
instead of a binary tree.

[endsect]

[section A Big, Fat Warning About Proxy Iterators]

Before we go any further, I just want to make you aware that _Text_ makes
extensive use of proxy iterators (see _8_to_32_iter_ and friends).  This is
fine in C++20 and later, but is not fine in earlier versions of standard.  In
fact, in earlier versions proxy iterators are not iterators at all, by the
standard's formal definition.

This is not a problem in practice; I have yet to run into any code that does
not compile, or that does not work in some other way, due to the use of these
proxy iterators, but it is a theoretical problem about which you should know.
Consider yourself warned.

[endsect]

[section The `v1` and `v2` Namespaces, and the Use of C++20 Concepts]

For much of this library, there are two interfaces: one in namespace
`boost::text::v1`, and one in `boost::text::v2`.  The `v1` version uses SFINAE
to constrain templates, and the `v2` version uses concepts, including the
standard concepts from C++20.

When you build with a conforming C++20 compiler, the compiler defines a macro
`__cpp_lib_concepts` that indicates that the compiler supports concepts, and
provides the standard concepts in `std` and `std::ranges`.  When _Text_ sees
the `__cpp_lib_concepts` macro defined, it inlines the `v2` namespace;
otherwise, it inlines the `v1` namespace.

The net result for you as a user is that, for some function or type `foo` with
`v1` and `v2` versions, you can use `boost::text::foo`, and you will get
`boost::text::v1::foo` when building in C++14 or C++17 modes, and
`boost::text::v2::foo` when building in C++20 or later.

If you are using an early C++20 implementation that claims to have concept
support, but that breaks when you build _Text_'s C++20 code, you can disable
the `v2` namespace by defining _disable_concepts_m_.

[endsect]

[section Important _Text_ Conventions]

[heading C++20's `std::ranges::dangling`]

When you call an algorithm `template<std::forward_range R> foo(R && r)` in
C++20, and you pass an rvalue for `r` that is not know to be a "borrowing
range" like a view, the algorithm will often rerturn a `std::ranges::dangling`
instead of the desired result.  This will probably cause your code to be
ill-formed if you try to use the result.  THis lets you catch errors like
this:

    // decltype(it) is std::ranges::dangling.  If it were a proper iterator,
    // "it" would now be a dangerous dangling reference, and using it would
    // cause your progam to have undefined behavior.
    auto it = std::ranges::find(std::vector<int>{/* ... */}, 42);

_Text_ follows this convention.  If you call an algorithm `a` that returns an
iterator or subrange, or that constructs a view, and you pass `a` an rvalue
range in which to do its work, it will return a `std::ranges::dangling`.

[heading The `as_` Prefix]

Functions and view adaptors that begin with `as_` operate on values that model
_rng_like_.  That is, they not only work with _CPRngs_ and/or _GrRngs_, but
also null-terminated string pointers.  For instance, for some `char const *
c_str = /* ... */`, `c_str | text::boost::as_utf32` creates a code point view
of the contents of `c_str`, treated as a null-terminated string.

[note Any pointer to an integral type whose size is 8-, 16-, or 32-bits will
be treated as a null-terminated string.]

[endsect]

[section Peculiarities of _Text_ Iterators and Ranges]

[heading _Text_ Iterators Are Constructed from More Than One Underlying Iterator]

To do iteration in many text-handling contexts, you need to know the beginning
and the end of the range you are iterating over, just to be able to do
iteration correctly.  Note that this is not a safety issue, but a correctness
one.

For example, say we have a string `s` of UTF-8 code units that we would like
to iterate over to produce UTF-32 code points.  If the last code unit in `s`
is `0xe0`, we should expect two more code units to follow.  They are not
present, though, becuase `0xe0` is the last code unit.  Now consider how you
would implement `operator++()` for an iterator `it` that transcodes from UTF-8
to UTF-32.  If you advance far enough to get the next UTF-32 code point in
each call to `operator++()`, you may run off the end of `s` when you find
`0xe0` and try to read two more code units.  Note that it does not matter that
`it` probably comes from a range with an end-iterator or sentinel as its mate;
*inside* `it`'s `operator++()` this is no help.  `it` must therefore have the
end-iterator or sentinel as a data member.  The same logic applies to the
other end of the range if `it` is bidirectional _emdash_ `it` must also have
the iterator to the start of the underlying range as a data member.

This unfortunate reality comes up over and over in the _Text_ iterators, not
just the ones that are UTF transcoding iterators.  This is why iterators in
_Text_ usually consist of three underlying iterators.

[heading Often, Iterators from Subranges Can Only be Compared to Each Other]

This follows directly from the effect described above.  Say you get a subrange
from one iteration of a text segmentation algorithm:

    char const * c_str = /* ... */;
    auto const lines =
        c_str | boost::text::as_graphemes |
        boost::text::lines(boost::text::allowed_breaks);

    int line_index = 0;
    for (auto line : lines) {
        auto first = lines.begin()->begin();
        std::cout << "line " << line_index++ << " offsets: "
                  << std::ranges::distance(first, line.begin())
                  << " - "
                  << std::ranges::distance(first, line.end()) // Oops.
                  << "\n";
    }

This code does not halt.  The line marked with "Oops." will continue to count
forever in the second iteration.  This happens because `first` is constructed
from the iterators delimiting the first line, `*lines.begin()` (let's call
that line `l` for brevity).  `first`'s underlying iterators are:
`lines.begin()->begin().base()`, its lower bound, which points to the first
code point in `l`; `lines.begin()->begin().base()`, which is the current
position of `first` within `l`; and `lines.begin()->end().base()`, its upper
bound, for one past the last code point in `l`.

When evaluating `std::ranges::distance(first, line.end())`, `first` must be
advanced until it is equal to `line.end()`.  However, there is an upper bound
on how far we can advance `first`.  It cannot advance past its underlying
upper bound iterator, which is equal to `lines.begin()->end().base()`, which
will always be less than `line.end()`.

I know all of that was complicated.  To keep things simple, follow this rule:

[important When _Text_ gives you a subrange `s`, comparisons of `s.begin()` to
`s.end()` are fine, and so is iteration between `s.begin()` and `s.end()`.
However, iteration between either `s.begin()` or `s.end()` and any other
iterator may result in undefined behavior.]

[heading Sentinels Break Pre-C++10 Range-Based `for` Loops]

Prior to C++20, range-based `for` loops require that the begin-iterator and
the end-iterator have the same type.  This means that any range consisting of
an iterator/sentinel pair will not work with pre-C++20 range-based `for`
loops.  Writing it out the long way still works, of course, and in C++20 and
later modes, everything just works.

[endsect]
